import{q as n,g as s,L as a}from"./common-874b6af4.js";const t='{"title":"【深入浅出 Vue.js】Object 的变化侦测","frontmatter":{"date":"2022-03-26T00:00:00.000Z","title":"【深入浅出 Vue.js】Object 的变化侦测","tags":["Vue"]},"headers":[{"level":2,"title":"一、变化侦测","slug":"一、变化侦测"},{"level":2,"title":"二、如何追踪变化","slug":"二、如何追踪变化"},{"level":2,"title":"三、如何收集依赖","slug":"三、如何收集依赖"},{"level":2,"title":"四、依赖收集在哪里","slug":"四、依赖收集在哪里"},{"level":2,"title":"五、依赖是谁","slug":"五、依赖是谁"},{"level":2,"title":"六、什么是 Watcher","slug":"六、什么是-watcher"},{"level":2,"title":"七、递归侦测所有 key","slug":"七、递归侦测所有-key"},{"level":2,"title":"八、关于 Object 的问题","slug":"八、关于-object-的问题"},{"level":2,"title":"九、总结","slug":"九、总结"}],"relativePath":"docs/vue/book/srqc-1.md","lastUpdated":1673514417691.7922}';var p={};const o=[a('<h2 id="一、变化侦测"><a class="header-anchor" href="#一、变化侦测" aria-hidden="true">#</a> 一、变化侦测</h2><p>变化侦测有两种类型：”推“和”拉“。</p><p>“拉”指的是当状态发生变化，框架不知道哪个状态变了，需要通过暴力对比去找出变化的 DOM 节点。React 和 Angular 就是这种侦测方式，分别采用虚拟 DOM 技术和脏检查。</p><p>”推“指的是指的是状态变化能立马知道，Vue 就是属于这种，因此 Vue 能进行更细粒度的更新。</p><blockquote><p>细粒度指的是假如一个状态绑定着好多个依赖，每个依赖代表一个DOM节点，那么当这个状态发生改变时，向这个状态的所有依赖发送通知，让它们进行DOM更新操作。</p></blockquote><p>粒度太细，当状态多的情况下，依赖追踪在内存上的开销会很大。所以 Vue2.0 引入了虚拟 DOM，将粒度调整为中等粒度，即一个状态所绑定的依赖不再是一个 DOM 节点，而是一个组件。状态的变化会先通知到组件，组件内部再使用虚拟 DOM 进行比对。</p><h2 id="二、如何追踪变化"><a class="header-anchor" href="#二、如何追踪变化" aria-hidden="true">#</a> 二、如何追踪变化</h2><p>变化侦测有两种方式：Object.defineProperty 和 ES6 的 Proxy</p><p>下面定义一个响应式的方法：</p><div class="language-jsx"><pre><code><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tObejct<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t<span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> val\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\t\t\tval <span class="token operator">=</span> newVal\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="三、如何收集依赖"><a class="header-anchor" href="#三、如何收集依赖" aria-hidden="true">#</a> 三、如何收集依赖</h2><p>在 getter 中收集依赖，在 setter 中触发依赖。</p><h2 id="四、依赖收集在哪里"><a class="header-anchor" href="#四、依赖收集在哪里" aria-hidden="true">#</a> 四、依赖收集在哪里</h2><p>每个 key 都有一个数组，用来存储当前 key 的依赖。假设有一个依赖，存储在 <a href="http://window.target" target="_blank" rel="noopener noreferrer">window.target</a> 上，</p><div class="language-jsx"><pre><code><span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 新增</span>\n<span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tObejct<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t<span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tdep<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token comment">// 新增，存储依赖</span>\n\t\t\t<span class="token keyword">return</span> val\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\t\t  <span class="token comment">// 新增，触发依赖</span>\n\t\t\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dep<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t\tdep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\tval <span class="token operator">=</span> newVal\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>我们可以封装一个 Dep 类来管理依赖，实现依赖收集、删除、向依赖发送通知：</p><div class="language-jsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>\n\t<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span>\n\n  <span class="token function">addSub</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">removeSub</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">,</span> sub<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>target<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 修改</span>\n\tObejct<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t<span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tdep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 修改，存储依赖</span>\n\t\t\t<span class="token keyword">return</span> val\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\t\t\tdep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 修改</span>\n\t\t\tval <span class="token operator">=</span> newVal\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="五、依赖是谁"><a class="header-anchor" href="#五、依赖是谁" aria-hidden="true">#</a> 五、依赖是谁</h2><p>上面我们收集的依赖是 window.target，其实就是当属性发生变化后要通知的对象，我们称为依赖。</p><p>依赖也可能有很多种形式，模板、用户写的一个watch...所以需要一个集中处理这些情况的类。</p><p>我们在依赖收集阶段只收集这个类的实例，通知也只通知它，然后它再去通知其他地方。它叫Watcher！！！</p><h2 id="六、什么是-watcher"><a class="header-anchor" href="#六、什么是-watcher" aria-hidden="true">#</a> 六、什么是 Watcher</h2><p>类似于一个中介，数据发生变化时通知它，它再通知其他地方。</p><h2 id="七、递归侦测所有-key"><a class="header-anchor" href="#七、递归侦测所有-key" aria-hidden="true">#</a> 七、递归侦测所有 key</h2><p>为了侦测数据中的所有属性（包括子属性），需要封装一个 Observer 类。</p><p>这个类的作用是将一个数据内的所有属性（包括子属性）都转换成 getter/setter 的形式，来收集属性的依赖，并且当属性发生变化时会通知这些依赖。</p><div class="language-jsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">walk</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> \n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">//\t新增，递归子属性</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n  <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tObejct<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t<span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tdep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">return</span> val\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\t\t\tdep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\tval <span class="token operator">=</span> newVal\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="八、关于-object-的问题"><a class="header-anchor" href="#八、关于-object-的问题" aria-hidden="true">#</a> 八、关于 Object 的问题</h2><p>向 obj 对象新增属性或者删除属性，Vue.js 无法侦测到这个变化，所以不会向依赖发送通知。</p><blockquote><p>getter/setter 只能追踪一个数据是否被修改，无法追踪新增属性和删除属性。因为 js 没有提供元编程的能力。所以 Vue 提供了两个 API —— vm.$set 和 vm.$delete。</p></blockquote><h2 id="九、总结"><a class="header-anchor" href="#九、总结" aria-hidden="true">#</a> 九、总结</h2><ol><li>Object 可以通过 defineProperty 将属性转换成 getter/setter 的形式来追踪变化，读取时触发 getter，修改数据时触发 setter；</li><li>我们需要在 getter 中收集有哪些依赖使用了该数据，当 setter 触发时，去通知 getter 中收集的依赖数据发生了变化；</li><li>我们创建了 Dep 来收集依赖、删除依赖和向依赖发送消息等；</li><li>依赖其实就是 Watcher，只有 Watcher 触发的 getter 才会收集依赖，哪个 Watcher 触发了 getter，就把哪个 Watcher 收集到 Dep 中，当数据发生变化时，会循环依赖列表，把所有 Watcher 通知一遍；</li><li>Watcher 的原理是先把自己设置到全局唯一的指定位置（例如 window.target），然后读取数据。因为读取了数据，所以会触发这个数据的 getter。接着在 getter 中就会从全局唯一的那个位置读取当前正在读取数据的 Watcher，并把这个 Watcher 收集到 Dep 中去。通过这种方式， Watcher 可以主动订阅任意一个数据的变化；</li><li>我们创建了一个 Observer 类，把一个 object 中的所有数据都转换成响应式的。</li></ol><p><img src="/nirvana/_assets/srqc-1.109c3155.png" alt=""></p><ul><li>Data 通过 Observer 转换成了 getter/setter 的形式来追踪变化。</li><li>当外界通过 Watcher 读取数据时，会触发 getter 从而将 Watcher 添加到依赖 Dep 中。</li><li>当数据发生变化时，会触发 setter，从而向 Dep 中的依赖发送通知。</li><li>Watcher 接收到通知后，会向外界发送通知，变化通知到外界后触发视图更新，也有可能触发用户的某个回调函数。</li></ul>',35)];p.render=function(a,t,p,e,c,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
