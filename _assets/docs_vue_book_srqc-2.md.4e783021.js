import{q as n,g as s,L as a}from"./common-874b6af4.js";const t='{"title":"【深入浅出 Vue.js】Array 的变化侦测","frontmatter":{"date":"2022-03-28T00:00:00.000Z","title":"【深入浅出 Vue.js】Array 的变化侦测","tags":["Vue"]},"headers":[{"level":2,"title":"一、如何追踪变化","slug":"一、如何追踪变化"},{"level":2,"title":"二、拦截器","slug":"二、拦截器"},{"level":2,"title":"三、使用拦截器覆盖 Array 原型","slug":"三、使用拦截器覆盖-array-原型"},{"level":2,"title":"四、将拦截器方法挂载到数组的属性上","slug":"四、将拦截器方法挂载到数组的属性上"},{"level":2,"title":"五、如何收集依赖","slug":"五、如何收集依赖"},{"level":2,"title":"六、依赖列表存在哪儿","slug":"六、依赖列表存在哪儿"},{"level":2,"title":"七、收集依赖","slug":"七、收集依赖"},{"level":2,"title":"八、在拦截器中获取 Observer 实例","slug":"八、在拦截器中获取-observer-实例"},{"level":2,"title":"九、向数组的依赖发送通知","slug":"九、向数组的依赖发送通知"},{"level":2,"title":"十、侦测数组中元素的变化","slug":"十、侦测数组中元素的变化"},{"level":2,"title":"十一、侦测新增元素的变化","slug":"十一、侦测新增元素的变化"}],"relativePath":"docs/vue/book/srqc-2.md","lastUpdated":1673514417693.948}';var p={};const o=[a('<h2 id="一、如何追踪变化"><a class="header-anchor" href="#一、如何追踪变化" aria-hidden="true">#</a> 一、如何追踪变化</h2><p>想要追踪数组的变化，我们可以用一个拦截器覆盖 Array.prototype，那么每当使用 Array 原型上的方法操作数组时，其实执行的都是拦截器中的提供的方法。</p><h2 id="二、拦截器"><a class="header-anchor" href="#二、拦截器" aria-hidden="true">#</a> 二、拦截器</h2><p>Array 原型中可以改变数组自身内容的方法有 7 个，分别是 push、pop、shift、unshift、splice、sort 和 reverse。</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> arrayProto <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype\n<span class="token keyword">export</span> <span class="token keyword">const</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>arrayProto<span class="token punctuation">)</span>\n\n<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unshift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;splice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sort&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reverse&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>\n\tObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t<span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">mutator</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>先创建变量 arrayMethods 继承自 Array.prototype，具备其所有功能，后面要使用 arrayMethods 去覆盖 Array.prototype。</p><p>接下来在 arrayMethods 上使用 Object.defineProperty 方法将那些可以改变数组自身的方法进行封装。</p><p>当执行数组方法时，实际上执行的是 mutator 函数。</p><h2 id="三、使用拦截器覆盖-array-原型"><a class="header-anchor" href="#三、使用拦截器覆盖-array-原型" aria-hidden="true">#</a> 三、使用拦截器覆盖 Array 原型</h2><p>我们不能直接去覆盖全局的 Array，因为这样会污染到她。我们希望拦截操作只是针对那些被侦测了的数据，也就是拦截器只覆盖那些响应式数组的原型。 将一个数据转换为响应式的，需要通过 Observer，所以我们可以在里面使用拦截器覆盖那些即将被转换成响应式 Array 类型数据的原型就可以了。</p><div class="language-jsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\tvalue<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> arrayMethods <span class="token comment">// 新增</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">walk</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> \n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><div class="language-jsx"><pre><code>value<span class="token punctuation">.</span>__<span class="token operator">**</span>proto__<span class="token operator">**</span> <span class="token operator">=</span> arrayMethods\n</code></pre></div><p>这句代码的作用是将拦截器（加工后具备拦截功能的 arrayMethods）赋值给 value.<strong>proto</strong>，通过 <strong>proto</strong> 实现覆盖 value 原型的功能。</p><h2 id="四、将拦截器方法挂载到数组的属性上"><a class="header-anchor" href="#四、将拦截器方法挂载到数组的属性上" aria-hidden="true">#</a> 四、将拦截器方法挂载到数组的属性上</h2><p>当浏览器不能使用 <strong>proto</strong> 时，Vue 的做法是直接将 arrayMethods 上的方法设置到被侦测的数组上，也就是将已经加工了拦截操作的原型方法直接添加到 value 的属性中。</p><h2 id="五、如何收集依赖"><a class="header-anchor" href="#五、如何收集依赖" aria-hidden="true">#</a> 五、如何收集依赖</h2><p>在对象中，是在 getter 中收集依赖，依赖被存储在 Dep 里。Array 和 Object 一样，也是在 defineReactive 中收集依赖。Object 在 setter 中触发依赖，而 Array 在拦截器中触发依赖。</p><h2 id="六、依赖列表存在哪儿"><a class="header-anchor" href="#六、依赖列表存在哪儿" aria-hidden="true">#</a> 六、依赖列表存在哪儿</h2><p>Vue.js 把 Array 的依赖存放在 Observer 中：</p><div class="language-jsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 新增 dep</span>\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">const</span> augment <span class="token operator">=</span> hasProto <span class="token operator">?</span> protoAugment <span class="token operator">:</span> copyAugment\n      <span class="token function">augment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">,</span> arrayKeys<span class="token punctuation">)</span> \n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>为什么数组的依赖放 Observer 中？ 是因为在 getter 中可以访问到 Observer 实例，在 Array 拦截器中也可以访问到 Observer 实例。</p></blockquote><h2 id="七、收集依赖"><a class="header-anchor" href="#七、收集依赖" aria-hidden="true">#</a> 七、收集依赖</h2><p>把 Dep 实例保存在 Observer 的属性上之后，可以在 getter 中通过下面的方式来访问并收集依赖：</p><div class="language-jsx"><pre><code><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment">// 修改</span>\n\t<span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tObejct<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t<span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tdep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token comment">// 新增</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>childOb<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t\tchildOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 收集依赖</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token keyword">return</span> val\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\t\t\tdep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\tval <span class="token operator">=</span> newVal\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">/**\n\t* 尝试为 value 创建一个 Observe 实例\n\t* 如果创建成功，直接返回新创建的 Observe 实例\n\t* 如果 value 已经存在一个 Observe 实例，则直接返回它\n\t*/</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> asRootData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n\t<span class="token keyword">let</span> ob\n\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&#39;__ob__&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>__ob__ <span class="token keyword">instanceof</span> <span class="token class-name">Observe</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tob <span class="token operator">=</span> value<span class="token punctuation">.</span>__ob__\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> ob\n<span class="token punctuation">}</span>\n</code></pre></div><p>通过 observe 我们得到了数组的 Observe 实例（childOb），最后通过 childOb 的 dep 执行 depend 方法来收集依赖。从而实现了数组在 getter 中将依赖收集到 Observe 实例的 dep 中。</p><h2 id="八、在拦截器中获取-observer-实例"><a class="header-anchor" href="#八、在拦截器中获取-observer-实例" aria-hidden="true">#</a> 八、在拦截器中获取 Observer 实例</h2><p>Array 是对原型的一种封装，所以可以再拦截器中访问到 this（当前正在操作的数组）。</p><p>而依赖列表 dep 保存在 Observer 中，所以需要在 this 上读到 Observer 的实例：</p><div class="language-jsx"><pre><code><span class="token comment">// 工具函数</span>\n<span class="token keyword">function</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> enumerable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t<span class="token literal-property property">value</span><span class="token operator">:</span> val<span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>enumberable<span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&#39;__ob__&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 新增</span>\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">const</span> augment <span class="token operator">=</span> hasProto <span class="token operator">?</span> protoAugment <span class="token operator">:</span> copyAugment\n      <span class="token function">augment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">,</span> arrayKeys<span class="token punctuation">)</span> \n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>上面代码中，def 函数表示在 value 上新增了一个不可枚举的属性 &#39;<strong>ob</strong>&#39;，这个属性的值就是当前 Observer 的实例。</p><p>这样我们就可以通过数组数据的 &#39;<strong>ob</strong>&#39; 属性拿到 Observer 实例，然后拿到该实例的 &#39;<strong>ob</strong>&#39; 上的 dep 依赖列表。</p><blockquote><p><strong>ob</strong> 的作用也可以用来标记当前 value 是否已经被 Observer 转换成了响应式数据。也就是说，所有被侦测了变化的数据身上都会有一个 <strong>ob</strong> 属性来表示它们是响应式的。</p></blockquote><blockquote><p>value 被标记了 <strong>ob</strong> ，所以可以直接通过 value.<strong>ob</strong> 来访问 observer 实例，如果是Array 拦截器，也可以直接通过 this.<strong>ob</strong> 来访问 Observer 实例。</p></blockquote><h2 id="九、向数组的依赖发送通知"><a class="header-anchor" href="#九、向数组的依赖发送通知" aria-hidden="true">#</a> 九、向数组的依赖发送通知</h2><p>当侦测到数组发生变化时，会向依赖发送通知。我们只需要在 Observer 实例中拿到 dep 属性，然后直接发送通知：</p><div class="language-jsx"><pre><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unshift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;splice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sort&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reverse&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>\n\t<span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">mutator</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__\n\t\t\tob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 向依赖发送消息</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="十、侦测数组中元素的变化"><a class="header-anchor" href="#十、侦测数组中元素的变化" aria-hidden="true">#</a> 十、侦测数组中元素的变化</h2><p>我们需要在 Observer 中新增一些处理，让它可以将 Array 也转换成响应式的：</p><div class="language-jsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&#39;__ob__&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 侦测 Array 中的每一项</span>\n<span class="token function">observeArray</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">observe</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>observe 函数就是将数组中的每个元素都执行一遍 new Observe。</p><h2 id="十一、侦测新增元素的变化"><a class="header-anchor" href="#十一、侦测新增元素的变化" aria-hidden="true">#</a> 十一、侦测新增元素的变化</h2><p>数组中有些方法如 push、unshift、splice 是新增元素的，我们需要将新增的元素也转换成响应式的来侦测变化。</p><p>只要获取新增的元素，然后用 Observer 来侦测它们。</p><p>第一步，获取新增的元素：</p><div class="language-jsx"><pre><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unshift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;splice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sort&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reverse&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>\n\t<span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">mutator</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__\n\t\t\t<span class="token comment">// 新增</span>\n\t\t\t<span class="token keyword">let</span> inserted\n\t\t\t<span class="token keyword">switch</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;push&#39;</span><span class="token operator">:</span>\n\t\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;unshift&#39;</span><span class="token operator">:</span>\n\t\t\t\t\tinserted <span class="token operator">=</span> args\n\t\t\t\t\t<span class="token keyword">break</span>\n\t\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;splice&#39;</span><span class="token operator">:</span>\n\t\t\t\t\tinserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token keyword">break</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\tob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>第二步，使用 Observer 侦测新元素</p><p>我们知道 Observer 会将自身的实例附加到 value 的 <strong>ob</strong> 属性上。所有被侦测了变化的数据都有一个 <strong>ob</strong> 属性，数组元素也不例外。</p><p>因此我们可以在拦截器中通过 this 访问到 <strong>ob</strong>，然后调用其上的 observeArray 方法就可以了。</p><div class="language-jsx"><pre><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unshift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;splice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sort&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reverse&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>\n\t<span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">mutator</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__\n\t\t\t<span class="token keyword">let</span> inserted\n\t\t\t<span class="token keyword">switch</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;push&#39;</span><span class="token operator">:</span>\n\t\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;unshift&#39;</span><span class="token operator">:</span>\n\t\t\t\t\tinserted <span class="token operator">=</span> args\n\t\t\t\t\t<span class="token keyword">break</span>\n\t\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;splice&#39;</span><span class="token operator">:</span>\n\t\t\t\t\tinserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\t\t\t\t\tbeeak\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> ob<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> <span class="token comment">// 新增</span>\n\t\t\tob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-"><pre><code>\n## 十二、关于 Array 的问题\n\n对 Array 的变化侦测是通过拦截原型的方式实现的，所有有些像 this.list[0] = 2，这种变化是不会被侦测到的。还有 this.list.length = 0\n\n## 十三、总结\n\n- Array 是通过方法来改变内容的，所以我们创建拦截器去覆盖数组原型的方式来追踪变化。\n- 为了不污染全局的 Array.prototype，我们在 Observe 中值针对那些需要侦测变化的数组使用 __proto__ 来覆盖原型方法，但 __proto__ 不是标准属性，针对那些不支持这个属性的浏览器，会直接循环拦截器，把拦截器中的方法直接设置到数组身上来拦截 Array.prototype 上的原生方法。\n- Array 收集依赖的方式和 Object 一样，都是在 getter 中收集，但是由于依赖的位置不同，数组要在拦截器中向依赖发消息，所以依赖不能像 Object 一样保存在 defineReactive 中，而是把依赖保存在了 Observe 实例上。\n- 在 Observe 中，我们对每个侦测了变化的数据都标记 __ob__，并把 this （Observe 实例）保存在 __ob__ 上，有两个作用，一方面是标记数据是否被侦测了变化，另一方面是为了便于通过数据取到 __ob__，从而拿到 Observe 实例上保存的依赖。当拦截到数组发生变化时，向依赖发送通知。\n- 除了侦测数组自身的变化，数组中元素发生变化也要被侦测到。我们在 Observe 中判断如果当前被侦测的数据是数组，则调用 observeArray 方法将数组上的每一个元素都转换成响应式的并侦测变化。\n- 除了侦测已有数据，当调用push、unshift、splice等方法向数组新增元素时，这些元素也要被侦测到。我们使用当前操作数组的方法来进行判断，如果是这几个方法，则从参数中将新增数据提取出来，然后使用 observeArray 方法对新增数据进行变化侦测。</code></pre></div>',51)];p.render=function(a,t,p,e,c,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
