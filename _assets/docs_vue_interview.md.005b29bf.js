import{q as e,g as a,L as r}from"./common-874b6af4.js";const d='{"title":"【Vue 灵魂拷问】","frontmatter":{"date":"2019-07-22T00:00:00.000Z","title":"【Vue 灵魂拷问】","tags":["Vue"]},"headers":[{"level":3,"title":"优点:","slug":"优点"},{"level":3,"title":"缺点:","slug":"缺点"}],"relativePath":"docs/vue/interview.md","lastUpdated":1673852532427.1733}';var t={};const p=[r('<h1 id="_1、说说你对-vue-的理解"><a class="header-anchor" href="#_1、说说你对-vue-的理解" aria-hidden="true">#</a> 1、说说你对 Vue 的理解</h1><p>Vue 是一个构建数据驱动的渐进性框架，它的目标是通过 API 实现响应数据绑定和视图更新。</p><h1 id="_2、说说-vue-的优缺点"><a class="header-anchor" href="#_2、说说-vue-的优缺点" aria-hidden="true">#</a> 2、说说 Vue 的优缺点</h1><h3 id="优点"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点:</h3><p>1、数据驱动视图，对真实 dom 进行抽象出 virtual dom(本质就是一个 js 对象)， 并配合 diff 算法、响应式和观察者、异步队列等手段以最小代价更新 dom，渲染页面。</p><p>2、组件化，组件用单文件的形式进行代码的组织编写，使得我们可以在一个文 件里编写 html\\css(scoped 属性配置 css 隔离)\\js 并且配合 Vue-loader 之后，支 持更强大的预处理器等功能。</p><p>3、强大且丰富的 API 提供一系列的 api 能满足业务开发中各类需求。</p><p>4、由于采用虚拟 dom，让 Vue ssr 先天就足。</p><p>5、生命周期钩子函数，选项式的代码组织方式，写熟了还是蛮顺畅的，但仍然 有优化空间(Vue3 composition-api)。</p><p>6、生态好，社区活跃。</p><h3 id="缺点"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点:</h3><p>1、由于底层基于 Object.defineProperty 实现响应式，而这个 api 本身不支持 IE8 及以下浏览器。</p><p>2、csr 的先天不足，首屏性能问题(白屏) 3、由于百度等搜索引擎爬虫无法爬取 js 中的内容，故 spa 先天就对 seo 优化心有余力不足(谷歌的 puppeteer 就挺牛逼的，实现预渲染底层也是用到了这个工具)。</p><h1 id="_3、vue-和-react-有什么不同-使用场景分别是什么"><a class="header-anchor" href="#_3、vue-和-react-有什么不同-使用场景分别是什么" aria-hidden="true">#</a> 3、Vue 和 React 有什么不同?使用场景分别是什么?</h1><p>1、Vue 是完整一套由官方维护的框架，核心库主要有由尤雨溪大神独自维护，而 React 是不要脸的书维护(很多库由社区维护)，曾经一段时间很多人质疑 Vue 的后续维护性， 似乎这并不是问题。</p><p>2、Vue 上手简单，进阶式框架，白话说你可以学一点，就可以在你项目中去用一点， 你不一定需要一次性学习整个 Vue 才能去使用它，而 React，恐怕如果你这样会面对项 目束手无策。</p><p>3、语法上 Vue 并不限制你必须 es6+完全 js 形式编写页面，可以视图和 js 逻辑尽可能分 离，减少很多人看不惯 React-jsx 的恶心嵌套，毕竟都是作为前端开发者，还是更习惯 于 html 干净。</p><p>4、很多人说 React 适合大型项目，适合什么什么，Vue 轻量级，适合移动端中小型项目， 其实我想说，说这话的人是心里根本没点逼数，Vue 完全可以应对复杂的大型应用，甚 至于说如果你 React 学 的不是很好，写出来的东西或根本不如 Vue 写的，毕竟 Vue 跟着 官方文档撸就行，自有人帮你规范，而 React 比较懒散自由，可以自由发挥。</p><p>5、Vue 在国内人气明显胜过 React，这很大程度上得益于它的很多语法包括编程思维更 符合国人思想。</p><h1 id="_4、什么是虚拟-dom"><a class="header-anchor" href="#_4、什么是虚拟-dom" aria-hidden="true">#</a> 4、什么是虚拟 DOM?</h1><p>虚拟 dom 是相对于浏览器所渲染出来的真实 dom 的，在 react，vue 等技术出现之前， 我们要改变页面展示的内容只能通过遍历查询 dom 树的方式找到需要修改的 dom 然 后修改样式行为或者结构，来达到更新 ui 的目的。</p><p>这种方式相当消耗计算资源，因为每次查询 dom 几乎都需要遍历整颗 dom 树，如果 建立一个与 dom 树对应的虚拟 dom 对象( js 对象)，以对象嵌套的方式来表示 dom 树，那么每次 dom 的更改就变成了 js 对象的属性的更改，这样一来就能查找 js 对象 的属性变化要比查询 dom 树的性能开销小。</p><h1 id="_5、请描述下-vue-的生命周期是什么"><a class="header-anchor" href="#_5、请描述下-vue-的生命周期是什么" aria-hidden="true">#</a> 5、请描述下 vue 的生命周期是什么?</h1><p>生命周期就是 vue 从开始创建到销毁的过程，分为四大步(创建，挂载， 更新，销毁)，每一步又分为两小步，如 beforeCreate，created。beforeCreate 前，也就是 new Vue 的时候会初始化事件和生命周期;</p><p>beforeCreate 和 created 之间会挂载 Data，绑定事件;接下来会根据 el 挂载页面元素，如 果没有设置 el 则生命周期结束，直到手动挂载;el 挂载结束后，根据 templete/outerHTML(el)渲染页面;</p><p>在 beforeMount 前虚拟 DOM 已经创建完 成;之后在 mounted 前，将 vm.$el 替换掉页面元素 el;</p><p>mounted 将虚拟 dom 挂载到真实页面(此时页面已经全部渲染完成);</p><p>之后发生数据变化时 触发 beforeUpdate 和 updated 进行一些操作;</p><p>最后主动调用销毁函数或者 组件自动销毁时 beforeDestroy，手动撤销监听事件，计时器等;</p><p>destroyed 时仅存在 Dom 节点，其他所有东西已自动销毁。这就是我所理解的 vue 的一个完整的生命周期。</p><p><img src="/nirvana/_assets/vue-1.07e06ed2.png" alt=""></p><h1 id="_6、vue-如何监听键盘事件"><a class="header-anchor" href="#_6、vue-如何监听键盘事件" aria-hidden="true">#</a> 6、vue 如何监听键盘事件?</h1>',32)];t.render=function(r,d,t,u,o,s){return e(),a("div",null,p)};export{d as __pageData,t as default};
