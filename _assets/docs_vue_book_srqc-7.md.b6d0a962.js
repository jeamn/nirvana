import{q as e,g as t,L as a}from"./common-874b6af4.js";const l='{"title":"【深入浅出 Vue.js】模板编译","frontmatter":{"date":"2022-04-13T00:00:00.000Z","title":"【深入浅出 Vue.js】模板编译","tags":["Vue"]},"headers":[{"level":2,"title":"一、概念","slug":"一、概念"},{"level":2,"title":"二、将模板编译成渲染函数","slug":"二、将模板编译成渲染函数"}],"relativePath":"docs/vue/book/srqc-7.md","lastUpdated":1673514417697.7812}';var o={};const p=[a('<h2 id="一、概念"><a class="header-anchor" href="#一、概念" aria-hidden="true">#</a> 一、概念</h2><p>模板编译的主要目标就是生成渲染函数，渲染函数每次执行的时候，会使用当前最新的状态生成一份新的 vnode，然后使用这个 vnode 进行渲染。</p><h2 id="二、将模板编译成渲染函数"><a class="header-anchor" href="#二、将模板编译成渲染函数" aria-hidden="true">#</a> 二、将模板编译成渲染函数</h2><p>分两个步骤，先将模板解析成 AST（抽象语法树），然后再使用 AST 生成渲染函数。</p><p>由于静态节点不需要总是重新渲染，所以在生成 AST 之后、生成渲染函数之前这个阶段，需要遍历一遍 AST，给所有静态节点做一个标记。这样在虚拟 DOM 中更新节点时，就不会重新渲染它。</p><p>所以模板编译大致分为：</p><ul><li><p>将模板解析为 AST（解析器）</p><p>在解析器内部分成了很多小解析器，其中包括过滤器解析器、文本解析器和 HTML 解析器，然后通过一条主线将这些解析器组装在一起。</p><blockquote><p>过滤器解析器主要解析过滤器；文本解析器主要解析带变量的文本；HTML 解析器主要用来解析模板，每当解析到 HTML 标签的开始位置、结束位置、文本或者注释时，都会触发钩子函数，然后将相关信息通过参数传递出来。</p></blockquote></li><li><p>遍历 AST 标记静态节点（优化器）</p><p>每次重新渲染时，不需要再为静态节点创建虚拟节点，而是直接克隆已存在的虚拟节点。</p></li><li><p>使用 AST 生成渲染函数（代码生成器）</p><p>渲染函数的作用是创建 vnode，之所以可以创建 vnode，是因为代码字符串中会有很多函数调用，这些函数是虚拟 DOM 提供的创建 vnode 的方法。</p><blockquote><p>比如 _c 可以创建元素类型的 vnode，_v 可以创建文本类型的 vnode。</p></blockquote></li></ul>',7)];o.render=function(a,l,o,d,r,i){return e(),t("div",null,p)};export{l as __pageData,o as default};
