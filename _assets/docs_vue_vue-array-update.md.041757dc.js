import{q as n,g as s,l as a,L as p}from"./common-874b6af4.js";const t='{"title":"【Vue】从 vue 双向数据绑定到数组更新机制","frontmatter":{"date":"2019-03-26T00:00:00.000Z","title":"【Vue】从 vue 双向数据绑定到数组更新机制","tags":["Vue"]},"headers":[{"level":2,"title":"一、vue如何监控数据的变化？","slug":"一、vue如何监控数据的变化？"},{"level":2,"title":"二、数组更新机制","slug":"二、数组更新机制"}],"relativePath":"docs/vue/vue-array-update.md","lastUpdated":1674123948987.3794}';var o={};const e=p('<h2 id="一、vue如何监控数据的变化？"><a class="header-anchor" href="#一、vue如何监控数据的变化？" aria-hidden="true">#</a> 一、vue如何监控数据的变化？</h2><p>我们先定义一个数据源：</p><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jeamn&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>我们知道，选项 data 里面返回的是一个对象，对象里面存放着各种数据类型的属性，接下来我们实现一个方法来监听 data 里面数据的变化：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">observer</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',5),c=p('<p>当被监听的是一个对象的时候，我们遍历这个对象里面的所有属性，利用对象的 defineProperty 属性来对数据进行劫持，接下来我们实现这个方法：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> value\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据更新&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            value <span class="token operator">=</span> val\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>利用 set 方法，当数据改变的时候，我们可以做一些操作，比如我们在这里打印“数据更新”，并将新的值替换老的值，然后我们监听 obj 对象，并改变 name 属性：</p><div class="language-js"><pre><code><span class="token function">observer</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nobj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;mike&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>可以看到控制台打印了一次“数据更新”，data 中的数据也相应地发生了改变。这其实就是 vue 双向数据绑定的雏形。</p><p>如果 data 中的属性是对象呢？接下来我们改一下数据源：</p><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jeamn&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">newAge</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">oldAge</span><span class="token operator">:</span> <span class="token number">19</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个时候我们去改变数据，是不会触发视图更新的，我们可以看到控制台是没有打印“数据更新”的</p><div class="language-js"><pre><code><span class="token function">observer</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nobj<span class="token punctuation">.</span>age<span class="token punctuation">.</span>newAge <span class="token operator">=</span> <span class="token number">30</span>\n</code></pre></div><p>所以，让我们完善一下 defineReactive 方法，当我们在解析 data 中属性的 value 的时候，如果这个 value 是一个对象，那么我们是需要继续对它进行监听的，所以，我们可以在 defineReactive 执行的时候，解析这个对象，</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>   <span class="token comment">// 如果 value 是一个对象，只需要再监听一次，递归</span>\n    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> value\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据更新&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            value <span class="token operator">=</span> val\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个时候我们就可以看到控制台打印了 “数据更新”。</p><p>同理，当我们赋值的时候，传的是一个对象，比如，我们将一个对象赋值给 obj 的 age，然后我们再去修改这个对象的属性：</p><div class="language-js"><pre><code>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">nowAge</span><span class="token operator">:</span> <span class="token number">40</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span>age<span class="token punctuation">.</span>nowAge <span class="token operator">=</span> <span class="token number">50</span>\n</code></pre></div><p>我们可以看到，只会触发一次 “数据更新”，那么这次“数据更新”，其实就是我们定义 obj.age 的时候触发的，那么我们怎么再修改新传入的对象里面的属性的时候，也触发视图更新呢？很简单，只需要在对象中取数据的时候，即 set 方法调用时，去监听一下这个改变后的新值：</p><div class="language-js"><pre><code><span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">observer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据更新&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    value <span class="token operator">=</span> val\n<span class="token punctuation">}</span>\n</code></pre></div><p>那么这个时候就可以看到打印两次“数据更新”了。</p><p>这里还要注意的一个点是：</p><blockquote><p>如果对象中不存在某个属性，则改变这个属性的值，并不会刷新视图，因为 observer 遍历的是已有属性</p></blockquote><p>这只是 vue 中对对象数据类型的数据进行监听的基本方法，我们知道 Object.defineProperty 只适用于对象，那么 vue 中怎么监听数组的数据变化呢？</p><h2 id="二、数组更新机制"><a class="header-anchor" href="#二、数组更新机制" aria-hidden="true">#</a> 二、数组更新机制</h2><p>Object.defineProperty 不支持数组，所以 vue 重写了数组的方法，如果调用的数组方法在这个范畴，那么还是会触发视图的更新。那么我们就列举几个数组的方法并重写它们：</p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;slice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unshift&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> oldPush <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span>\n    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数组数据更新&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">oldPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>然后调用数组的方法：</p><div class="language-js"><pre><code>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 打印“数据更新”</span>\nobj<span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>      <span class="token comment">// 打印“数组数据更新”</span>\nobj<span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// 打印“数组数据更新”</span>\nobj<span class="token punctuation">.</span>age<span class="token punctuation">.</span>length <span class="token operator">--</span>    <span class="token comment">// 通过长度更改数组，不会触发视图更新</span>\nobj<span class="token punctuation">.</span>age<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>       <span class="token comment">// 直接通过索引修改数组的值，会打印“数据更新”</span>\n</code></pre></div><blockquote><p>当通过数组索引去修改属性的时候，不会触发数组的更新机制，但会触发对象的更新机制，因为整个数组对象是可以被监听的。所以视图是不会更新的。</p></blockquote>',26);o.render=function(p,t,o,u,l,k){return n(),s("div",null,[e,a(" more "),c])};export{t as __pageData,o as default};
