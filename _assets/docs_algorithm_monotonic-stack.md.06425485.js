import{q as n,g as s,L as a}from"./common-874b6af4.js";const p='{"title":"【算法】单调栈和窗口及其更新结构","frontmatter":{"date":"2023-01-10T00:00:00.000Z","title":"【算法】单调栈和窗口及其更新结构","tags":["算法"],"describe":"算法系列"},"headers":[{"level":2,"title":"一、单调栈","slug":"一、单调栈"},{"level":2,"title":"二、滑动窗口","slug":"二、滑动窗口"},{"level":3,"title":"滑动窗口是什么？","slug":"滑动窗口是什么？"},{"level":3,"title":"滑动窗口内最大值和最小值的更新结构","slug":"滑动窗口内最大值和最小值的更新结构"},{"level":3,"title":"最大值的获取过程（最小值同理）：","slug":"最大值的获取过程（最小值同理）："},{"level":2,"title":"三、题目","slug":"三、题目"},{"level":3,"title":"题目一","slug":"题目一"},{"level":3,"title":"题目二","slug":"题目二"}],"relativePath":"docs/algorithm/monotonic-stack.md","lastUpdated":1674123862814.2146}';var t={};const o=[a('<h2 id="一、单调栈"><a class="header-anchor" href="#一、单调栈" aria-hidden="true">#</a> 一、单调栈</h2><p>求数组中每个元素，左边离它最近的比它小的数在哪，右边离它最近的比它小的数在哪。</p><p>暴力解法：遍历，复杂度为O(n^2)</p><p>较优解：单调栈，复杂度为 O(n)</p><p>已知数组 [3，4，2，5，6，0，1]</p><p>思路：</p><p>（1）先假设数组中无重复值；（2）让栈底到栈顶，从小到大；（3）出栈的时候做记录；</p><p>（4）让某个数出栈的数，即为该数的右边离它最近的比它小的数；（5）某个数压着的数，即为该数的左边离它最近的比它小的数；（6）每个数必须入栈一次出栈一次；</p><p>出入栈顺序：3入，4入，4出记录4（左3右2），3出记录3（左无右2），2入，5入，6入，6出记录6（左5右0），5出记录5（左2右0），2出记录2（左无右0），1入，1出（左0右无），0出（左无右无）</p><h2 id="二、滑动窗口"><a class="header-anchor" href="#二、滑动窗口" aria-hidden="true">#</a> 二、滑动窗口</h2><h3 id="滑动窗口是什么？"><a class="header-anchor" href="#滑动窗口是什么？" aria-hidden="true">#</a> 滑动窗口是什么？</h3><ul><li>一种想象出来的数据结构</li><li>具有左边界 L 和右边界 R</li><li>在数组或者字符串或者一个序列上，记为 S，窗口就是S[L...R]这一部分</li><li>L 往右滑意味着一个样本出了窗口，R 往右滑意味着一个样本进了窗口</li><li>L 和 R 都只能往右滑，且 L 不大于 R</li></ul><h3 id="滑动窗口内最大值和最小值的更新结构"><a class="header-anchor" href="#滑动窗口内最大值和最小值的更新结构" aria-hidden="true">#</a> 滑动窗口内最大值和最小值的更新结构</h3><ul><li><p>窗口不管是 L 还是 R 滑动之后，都会让窗口呈现新状况。</p></li><li><p>如何能够更快地得到窗口当前状况下的最大值和最小值？</p></li><li><p>采取遍历的方式去寻找最大值，复杂度是 O(n)，性能较差。</p></li><li><p>最好平均下来复杂度能做到 O(1)，所以，</p><p>利用单调双端队列（双向链表），即，一个数据可以从双端队列的头部进头部出，也可以从尾部进尾部出。</p></li></ul><h3 id="最大值的获取过程（最小值同理）："><a class="header-anchor" href="#最大值的获取过程（最小值同理）：" aria-hidden="true">#</a> 最大值的获取过程（最小值同理）：</h3><p>原则：保证双端队列中的数，从左往右是从大到小</p><ul><li>L 往右移动，出的时候判断： <ul><li>双端队列头部的数是否是可以移出的（对比下标）： <ul><li>如果是，则双端队列中的数从头部出；</li><li>如果不是，不做操作；</li></ul></li></ul></li><li>R 往右移动，双端队列中的数从尾部进，进的时候需要判断： <ul><li>当前双端队列尾部的数是否大于即将进的数： <ul><li>如果是，则进数；</li><li>如果不是，则将双端队列尾部的数移出，再进数。</li></ul></li></ul></li></ul><p>则，此时双端队列头部的数，就是每次窗口状况的最大值。</p><p>双端队列可以解释成：哪些数会成为当前窗口最大值的优先级，左边优先级最高。</p><p>注意：双端队列中存放的是位置下标而不是具体的值，目的是为了判断头部数据是否能移除。</p><h2 id="三、题目"><a class="header-anchor" href="#三、题目" aria-hidden="true">#</a> 三、题目</h2><h3 id="题目一"><a class="header-anchor" href="#题目一" aria-hidden="true">#</a> 题目一</h3><p>假设一个固定大小为 W 的窗口，依次划过 arr，返回每一次滑出状况的最大值</p><p>例如：arr = [4,3,5,4,3,3,6,7]，W = 3</p><p>返回：[5,5,5,4,6,7]</p><div class="language-jsx"><pre><code><span class="token keyword">function</span> <span class="token function">SlidingWindowMaxArray</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> w</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> w <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> qmax <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token constant">R</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token constant">R</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>qmax<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>qmax<span class="token punctuation">[</span>qmax<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span><span class="token constant">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            qmax<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        qmax<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2 3</span>\n\n        <span class="token comment">// 如果窗口没有形成W的长度之前，不弹出数字</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>qmax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token constant">R</span> <span class="token operator">-</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            qmax<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 以上把窗口更新做完了</span>\n\n        <span class="token comment">// 如果窗口没有形成W的长度之前，不收集头部的值</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">R</span> <span class="token operator">&gt;=</span> w<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>qmax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">SlidingWindowMaxArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-java"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingWindowMaxArray</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMaxWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> w <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 其中放的是位置，从大到小</span>\n        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> qmax <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token class-name">R</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token class-name">R</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>qmax<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>qmax<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                qmax<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            qmax<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            \n            <span class="token comment">// 如果窗口没有形成W的长度之前，不弹出数字</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>qmax<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">R</span> <span class="token operator">-</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                qmax<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 以上把窗口更新做完了</span>\n            \n            <span class="token comment">// 如果窗口没有形成W的长度之前，不收集头部的值</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">&gt;=</span> w<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>qmax<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="题目二"><a class="header-anchor" href="#题目二" aria-hidden="true">#</a> 题目二</h3><p>给定一个整形数组 arr，和一个整数 num。某个 arr 中的子数组 sub，如果想达标，必须满足：</p><p>sub 中最大值 - sub 中最小值 ≤ num，返回 arr 中达标子数组的数量。</p><p>思路：某个范围如果达标，缩小范围必达标；某个范围如果不达标，扩大范围必不达标。</p><p>假设 L 到 R 为达标数组，且 L...L&#39;...R&#39;...R，则 L&#39;...R&#39; 必为达标数组。</p><p>假设 L 到 R 为不达标数组，则 L 往左扩和 R 往右扩均为不达标数组。</p><p>利用两个双端队列，分别作出窗口内的最大值结构和最小值结构。</p><p>从 arr 的左边第一位开始往右扩，每扩一位，计算 max - min 是否 ≤ num，直到不达标的位置停，且不让该值进窗口，可以算出以 arr 第一位开始的子数组达标的数量。</p><p>接下来从 arr 的第二位开始往右扩，重复上面步骤，直到不达标的位置停，算出以 arr 第二位开始的子数组达标的数量。</p><p>即，求 0 开头的子数组数量，1 开头的子数组数量，...，复杂度为 O(n)</p>',37)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
