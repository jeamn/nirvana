import{q as n,g as s,L as a}from"./common-874b6af4.js";const t='{"title":"【深入浅出 Vue.js】变化侦测相关API实现原理","frontmatter":{"date":"2022-03-30T00:00:00.000Z","title":"【深入浅出 Vue.js】变化侦测相关API实现原理","tags":["Vue"]},"headers":[{"level":2,"title":"一、vm.$watch","slug":"一、vm-watch"},{"level":3,"title":"1、用法","slug":"_1、用法"},{"level":3,"title":"2、内部原理","slug":"_2、内部原理"},{"level":2,"title":"二、vm.$set","slug":"二、vm-set"},{"level":3,"title":"1、用法","slug":"_1、用法-2"},{"level":3,"title":"2、实现","slug":"_2、实现"},{"level":2,"title":"三、vm.$delete","slug":"三、vm-delete"},{"level":3,"title":"1、用法","slug":"_1、用法-3"},{"level":3,"title":"2、实现原理","slug":"_2、实现原理"}],"relativePath":"docs/vue/book/srqc-3.md","lastUpdated":1673514417694.8042}';var p={};const o=[a('<h2 id="一、vm-watch"><a class="header-anchor" href="#一、vm-watch" aria-hidden="true">#</a> 一、vm.$watch</h2><h3 id="_1、用法"><a class="header-anchor" href="#_1、用法" aria-hidden="true">#</a> 1、用法</h3><div class="language-jsx"><pre><code><span class="token comment">// { string | Function } expOrFn</span>\n<span class="token comment">// { Function | Object } callback</span>\n<span class="token comment">// { object } [options]</span>\n\t<span class="token comment">// { boolean } deep</span>\n\t<span class="token comment">// { boolean } immediate</span>\n<span class="token comment">// 返回值 { Function } unwatch</span>\nvm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span> expOrFn<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">)</span>\n</code></pre></div><p>回调函数调用时，会从参数得到新数据和旧数据。</p><blockquote><p>vm.$watch 返回一个取消观察函数，用来停止触发回调</p></blockquote><p>deep：可是设置是否侦测对象内部值的变化。</p><p>immediate：设置立即触发回调</p><h3 id="_2、内部原理"><a class="header-anchor" href="#_2、内部原理" aria-hidden="true">#</a> 2、内部原理</h3><p>本质是对 Watcher 的一种封装，但 vm.$watch 中的参数 deep 和 immediate 是 Watcher 中没有的：</p><div class="language-jsx"><pre><code><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$watch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>\n\toptions <span class="token operator">=</span> optinos <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\t<span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">cb</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> watcher<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\twatcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>\n\t<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> expOrFn <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> expOrFn\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>当 expOrFn 是函数时，Watcher 会同时观察 expOrFn 函数中读取的所有 Vue.js 实例上的响应式数据。</p></blockquote><blockquote><p>取消数据观察的本质： 把 watcher 实例从当前正在观察的状态的依赖列表中删除。</p></blockquote><p>Watcher 中的 teardown 方法实现：</p><p>首先需要在 Watcher 中记录自己都订阅了谁，也就是 watcher 实例被收集进了哪些 Dep 里。然后当 Watcher 不想继续订阅时，循环自己记录的订阅列表来通知它们（Dep）将自己从它们的依赖列表中移除掉。</p><p>添加 addDep 方法，记录自己都订阅过哪些 Dep：</p><div class="language-jsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>\n\t<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> expOrFn <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> expOrFn\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token function">addDep</span><span class="token punctuation">(</span><span class="token parameter">dep</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment">// 记录已经订阅这个 Dep</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token comment">// 记录自己订阅过哪些 Dep</span>\n\t\t\tdep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 将自己订阅到 Dep 中</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>上述代码中，我们使用 depIds 来判断如果当前 Watcher 已经订阅了该 Dep，则不会重复订阅。</p><p>则，Dep 中收集依赖的逻辑也需要改变：</p><div class="language-jsx"><pre><code><span class="token keyword">let</span> uid <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 新增</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>\n\t<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> uid<span class="token operator">++</span> <span class="token comment">// 新增</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// this.addSub(window.target) 废弃</span>\n\t\t\twindow<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 新增</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>此时，Dep 会记录数据发生变化时，需要通知哪些 Watcher，而 Watcher 也记录着自己被哪些 Dep 通知。多对多的关系。</p><p>有了记录之后，就可以新增 teardown 方法，来通知这些订阅的 Dep，让它们把自己从它们的依赖列表中移除：</p><div class="language-jsx"><pre><code><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length\n\t<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">removeSub</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="二、vm-set"><a class="header-anchor" href="#二、vm-set" aria-hidden="true">#</a> 二、vm.$set</h2><h3 id="_1、用法-2"><a class="header-anchor" href="#_1、用法-2" aria-hidden="true">#</a> 1、用法</h3><div class="language-jsx"><pre><code><span class="token comment">// { Object | Array } target</span>\n<span class="token comment">// { Object | number } key</span>\n<span class="token comment">// { any } value</span>\n<span class="token comment">// 返回值 { Function } unwatch</span>\nvm<span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value <span class="token punctuation">)</span>\n</code></pre></div><p>在 object 上设置一个属性，如果 object 是响应式的， 那么属性创建后也是响应式的，并且触发视图更新，这个方法主要用来避开 Vue.js 不能侦测属性被添加的限制。</p><h3 id="_2、实现"><a class="header-anchor" href="#_2、实现" aria-hidden="true">#</a> 2、实现</h3><p>vm.$set 的具体实现其实是在 observer 中抛出的 set 方法：</p><ul><li><p>处理 Array 的情况</p><div class="language-jsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidArrayIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ttarget<span class="token punctuation">.</span>length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>length<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n\t\ttarget<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span> val\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>上面代码中，如果 target 是数组并且 key 是有效的索引，就先设置 length 属性。接下来通过 splice 方法把 val 设置到 target 中指定的位置，这时候数组拦截器会侦测到 target 发生了变化，会帮我们把这个新增的 val 转换成响应式的。</p></li><li><p>key 已经存在于 target 中</p><div class="language-jsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidArrayIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ttarget<span class="token punctuation">.</span>length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>length<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n\t\ttarget<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span> val\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// 新增</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> target <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ttarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val\n\t\t<span class="token keyword">return</span> val\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>由于 key 已经存在 target 中，说明这个 key 已经被侦测了变化。所以只需要改数据就好了</p></li><li><p>处理新增的属性</p><div class="language-jsx"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidArrayIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ttarget<span class="token punctuation">.</span>length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>length<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n\t\ttarget<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span> val\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> target <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ttarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val\n\t\t<span class="token keyword">return</span> val\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// 新增</span>\n\t<span class="token keyword">const</span> ob <span class="token operator">=</span> target<span class="token punctuation">.</span>__ob__\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>_isVue <span class="token operator">||</span> <span class="token punctuation">(</span>ob <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">.</span>vmCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tprocess<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span><span class="token operator">=</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span> <span class="token punctuation">(</span>\n\t\t\t<span class="token string">&#39;Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.&#39;</span>\n\t\t<span class="token punctuation">)</span>\n\t\tretrun val\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ttarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val\n\t\t<span class="token keyword">return</span> val\n\t<span class="token punctuation">}</span>\n\t<span class="token function">defineReactive</span><span class="token punctuation">(</span>ob<span class="token punctuation">.</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n\tob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token keyword">return</span> val\n<span class="token punctuation">}</span>\n</code></pre></div><p>上面代码中，先获取 target 的 <strong>ob</strong> 属性。先处理 target 不能是 Vue 实例 或者根数据（this.$data）。接下来判断是不是响应式数据，如果不是直接设置值就好了。如果是，说明用户在响应式数据上新增了一个属性，这种情况下我们需要追踪这个新增属性的变化，即用 defineReactive 将新增属性转换成 getter/setter 的形式即可。</p></li></ul><h2 id="三、vm-delete"><a class="header-anchor" href="#三、vm-delete" aria-hidden="true">#</a> 三、vm.$delete</h2><p>因为 Vue 采用的是 Object.defineProperty 来侦测对象，所以使用 delete 关键字删除的无法被检测到，因此采用 vm.$delete 来删除数据中的某个属性。</p><h3 id="_1、用法-3"><a class="header-anchor" href="#_1、用法-3" aria-hidden="true">#</a> 1、用法</h3><div class="language-jsx"><pre><code><span class="token comment">// { Object | Array } target</span>\n<span class="token comment">// { string | number } key/index</span>\nvm<span class="token punctuation">.</span>$<span class="token keyword">delete</span><span class="token punctuation">(</span> target<span class="token punctuation">,</span> key <span class="token punctuation">)</span>\n</code></pre></div><p>删除对象的属性，如果对象是响应式的，我们需要能够视图更新，这个方法用于避开 Vue 不能检测到属性被删除的限制。</p><h3 id="_2、实现原理"><a class="header-anchor" href="#_2、实现原理" aria-hidden="true">#</a> 2、实现原理</h3>',36)];p.render=function(a,t,p,e,c,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
