import{q as n,g as s,L as a}from"./common-874b6af4.js";const t='{"title":"【深入浅出 Vue.js】优化器","frontmatter":{"date":"2022-04-16T00:00:00.000Z","title":"【深入浅出 Vue.js】优化器","tags":["Vue"]},"headers":[{"level":2,"title":"一、找出所有静态节点并标记","slug":"一、找出所有静态节点并标记"},{"level":2,"title":"二、找出所有静态根节点并标记","slug":"二、找出所有静态根节点并标记"}],"relativePath":"docs/vue/book/srqc-8.md","lastUpdated":1673514417698.2935}';var p={};const o=[a('<p>优化器的作用是在 AST 中找出静态子树并打上标记。标记静态子树有两点好处：</p><ol><li>每次重新渲染时，不需要为静态子树创建新节点；</li><li>在虚拟 DOM 中打补丁（patching）的过程可以跳过。</li></ol><p>优化器的内部实现主要分为两个步骤：</p><ol><li>在 AST 中找出所有静态节点并打上标记；</li><li>在 AST 中找出所有静态根节点并打上标记；</li></ol><p>先标记静态节点，再标记所有静态根节点。</p><p>什么是静态节点？</p><p>不会发生变化的节点属于静态节点，</p><blockquote><p>落实到 AST 中，静态节点指的就是 static 属性为 true 的节点。</p></blockquote><p>什么是根静态节点？</p><p>如果一个节点下面的所有子节点都是静态节点，并且它的父级是动态节点，那么它就是静态根节点。</p><blockquote><p>落实到 AST 中，静态根节点指的是 staticRoot 属性为 true 的节点。</p></blockquote><h2 id="一、找出所有静态节点并标记"><a class="header-anchor" href="#一、找出所有静态节点并标记" aria-hidden="true">#</a> 一、找出所有静态节点并标记</h2><p>从根节点开始，先判断根节点是不是静态根节点，再用相同的方式处理子节点，接着用同样的方式处理子节点的子节点，即递归处理。</p><p>下面是处理的函数：</p><div class="language-jsx"><pre><code><span class="token keyword">function</span> <span class="token function">markStatic</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tnode<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token function">isStatic</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n\t\t\t<span class="token function">markStatic</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n\t\t\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span>static<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\tnode<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token boolean">false</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 带变量的动态文本节点</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">false</span> \n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不带变量的纯文本节点</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">true</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>pre <span class="token operator">||</span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">!</span>node<span class="token punctuation">.</span>hasBindings <span class="token operator">&amp;&amp;</span> <span class="token comment">// 没有动态绑定</span>\n\t\t<span class="token operator">!</span>node<span class="token punctuation">.</span>if <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>for <span class="token operator">&amp;&amp;</span> <span class="token comment">// 没有 v-if 或 v-for 或 v-else</span>\n\t\t<span class="token operator">!</span><span class="token function">isBuiltInTag</span><span class="token punctuation">(</span>ndoe<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// 不是内置标签</span>\n\t\t<span class="token function">isPlatformReservedTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// 不是组件</span>\n\t\t<span class="token operator">!</span><span class="token function">isDirectChildOfTemplateFor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> \n\t\tObject<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isStaticKey<span class="token punctuation">)</span>\n\t<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果 type = 1，说明是一个元素节点。</p><p>首先判断元素节点使用了指令 v-pre，那么断定它是一个静态节点。</p><p>如果没有使用 v-pre，需要满足下面的条件才会认为是一个静态节点：</p><ul><li>不能使用动态绑定语法，即以 v-、@、: 开头的属性</li><li>不能使用 v-if、v-for 或者 -else 指令</li><li>不能是内置标签，即标签名不能是 slot 或者 component</li><li>不能是组件，即标签名必须是保留标签</li><li>当前节点的父节点不能是带 v-for 指令的 template 标签</li><li>节点中不存在动态节点才会有的属性</li></ul><p>递归是从上向下一次标记的，如果父节点被标记为静态节点之后，子节点却被标记为动态节点，这时会发生矛盾，因为静态子树的所有子节点应该都是静态节点，所以可以重新校对一下：</p><div class="language-jsx"><pre><code><span class="token keyword">function</span> <span class="token function">markStatic</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tnode<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token function">isStatic</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n\t\t\t<span class="token function">markStatic</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n\t\t\n\t\t\t<span class="token comment">// 新增校对</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span>static<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\tnode<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token boolean">false</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="二、找出所有静态根节点并标记"><a class="header-anchor" href="#二、找出所有静态根节点并标记" aria-hidden="true">#</a> 二、找出所有静态根节点并标记</h2><p>标记完静态节点之后要标记静态根节点</p><p>寻找静态根节点也是自上而下递归去找，如果一个节点被判定为静态根节点，那么不会继续向它的子级继续寻找，因为静态子树肯定只有一个根，就是最上面的静态节点。</p><p><img src="/nirvana/_assets/srqc-16.49d42363.png" alt=""></p><p>大部分情况下，我们找到的第一个静态节点会被标记为静态根节点，除了一种情况，就是这个元素节点只有一个文本节点，这种情况不会认为这个元素节点是静态节点，因为其优化成本将超过收益，所以它不会被标记为静态根节点。</p><div class="language-jsx"><pre><code><span class="token keyword">function</span> <span class="token function">markStaticRoots</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>static <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>\n\t\t\tnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> \n\t\t\tnode<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span>\n\t\t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tnode<span class="token punctuation">.</span>staticRoot <span class="token operator">=</span> <span class="token boolean">true</span>\n\t\t\t<span class="token keyword">return</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\tnode<span class="token punctuation">.</span>staticRoot <span class="token operator">=</span> <span class="token boolean">false</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token function">markStaticRoots</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>上面代码一部分是标记当前节点是否是静态根节点，另一部分是标记子节点是否是静态根节点。</p>',28)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
