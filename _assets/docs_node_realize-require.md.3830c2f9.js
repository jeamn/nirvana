import{q as n,g as s,L as a}from"./common-874b6af4.js";const p='{"title":"【Node】如何实现一个require方法","frontmatter":{"date":"2019-02-02T00:00:00.000Z","title":"【Node】如何实现一个require方法","tags":["Node"]},"headers":[{"level":3,"title":"一、node中requrie的用法","slug":"一、node中requrie的用法"},{"level":3,"title":"二、实现require需要实现什么","slug":"二、实现require需要实现什么"}],"relativePath":"docs/node/realize-require.md","lastUpdated":1674123928527.6614}';var t={};const o=[a('<h3 id="一、node中requrie的用法"><a class="header-anchor" href="#一、node中requrie的用法" aria-hidden="true">#</a> 一、node中requrie的用法</h3><p>我们知道，node的模块化实现用的是CommonJS规范，即，引入模块使用的是：</p><div class="language-js"><pre><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>&#39;<span class="token punctuation">.</span><span class="token operator">/</span>name<span class="token punctuation">.</span>js<span class="token punctuation">)</span>\n</code></pre></div><p>导出模块使用的是：</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>\n</code></pre></div><p>如果我们导入的文件没有写后缀名，那么node默认会先寻找路径下.js结尾的文件，如果找不到，会继续找.json结尾的文件，如果找不到，会找node结尾的文件....</p><p>那么我们来看一下怎么实现require方法，简单的实现，不考虑复杂因素，所以我们会默认给出导入模块的后缀名，.js或者.json，来对应处理引入的模块内容并将其导出。 \x3c!-- more --\x3e</p><h3 id="二、实现require需要实现什么"><a class="header-anchor" href="#二、实现require需要实现什么" aria-hidden="true">#</a> 二、实现require需要实现什么</h3><p>接下来我们先考虑实现一个require的大致思路：</p><ul><li>1） 拿到我们传入require方法的这个路径，在这里我们要拿绝对路径</li><li>2） 创建一个模块，并将我们拿到的模块内容存起来</li><li>3） 根据后缀名称来决定如何导出模块的内容</li></ul><h4 id="第一步：拿路径"><a class="header-anchor" href="#第一步：拿路径" aria-hidden="true">#</a> 第一步：拿路径</h4><div class="language-js"><pre><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 拿到绝对路径</span>\n    <span class="token keyword">const</span> absPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> moduleId<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="第二步：存内容"><a class="header-anchor" href="#第二步：存内容" aria-hidden="true">#</a> 第二步：存内容</h4><div class="language-js"><pre><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">//存储内容我们需要定义一个模块，模块只包含这个模块的路径id，以及模块的内容</span>\n<span class="token keyword">function</span> <span class="token function">Module</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id\n    <span class="token keyword">this</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">//默认导出一个空对象</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 拿到绝对路径</span>\n    <span class="token keyword">let</span> absPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> moduleId<span class="token punctuation">)</span>\n    <span class="token comment">// 创建一个模块来存储内容</span>\n    <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>absPath<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="第三步：导出去"><a class="header-anchor" href="#第三步：导出去" aria-hidden="true">#</a> 第三步：导出去</h4><blockquote><p>json文件：直接导出模块的内容</p><p>js文件：用闭包来处理导出的js模块，node的require是这样实现的，这样能解决命名空间的问题</p></blockquote><div class="language-js"><pre><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vm&#39;</span><span class="token punctuation">)</span> <span class="token comment">// node用一个虚拟的沙箱来实现代码的执行，而不是通过eval，因为eval不安全，eval可以读到全局的变量</span>\n\n<span class="token comment">//存储内容我们需要定义一个模块，模块只包含这个模块的路径id，以及模块的内容</span>\n<span class="token keyword">function</span> <span class="token function">Module</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id\n    <span class="token keyword">this</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">//默认导出一个空对象</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//自定义一个对象来实现对应后缀文件的执行方式</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;.js&#39;</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n        <span class="token comment">//每个模块都是一个闭包，这个闭包默认有五个参数：</span>\n        <span class="token keyword">let</span> moduleWrap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;(function(exports, module, require, __dirname, __filename){&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;})&#39;</span><span class="token punctuation">]</span>\n        <span class="token comment">//将读出来的内容拼接成代码块并在沙箱中执行</span>\n        <span class="token keyword">let</span> script <span class="token operator">=</span> moduleWrap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> content <span class="token operator">+</span> moduleWrap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n        vm<span class="token punctuation">.</span><span class="token function">runInThisContext</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">,</span> req<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;.json&#39;</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//如果是json结尾，直接将内容导出</span>\n        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 拿到绝对路径</span>\n    <span class="token keyword">let</span> absPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> moduleId<span class="token punctuation">)</span>\n    <span class="token comment">// 创建一个模块来存储内容</span>\n    <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>absPath<span class="token punctuation">)</span>\n    <span class="token comment">// 获取后缀名</span>\n    <span class="token keyword">let</span> ext <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>absPath<span class="token punctuation">)</span>\n    <span class="token comment">// 根据后缀名称进行加载</span>\n    obj<span class="token punctuation">[</span>ext<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>\n    <span class="token comment">//最后将modele的exports返回</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports\n<span class="token punctuation">}</span>\n\n<span class="token comment">//并试验一下</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token string">&#39;./user.json&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> name2 <span class="token operator">=</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token string">&#39;./name.js&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>简单而又粗暴的实现。。。</p><h5 id="参考文章"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h5><p><a href="https://juejin.im/post/5ab4d3d151882521d6578298" target="_blank" rel="noopener noreferrer">Node.js Require源码粗读</a><a href="http://www.ruanyifeng.com/blog/2015/05/require.html" target="_blank" rel="noopener noreferrer">阮一峰 require() 源码解读</a></p>',20)];t.render=function(a,p,t,e,c,u){return n(),s("div",null,o)};export{p as __pageData,t as default};
