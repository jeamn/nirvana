import{q as a,g as i,L as l}from"./common-874b6af4.js";const e='{"title":"【JavaScript】事件循环机制","frontmatter":{"date":"2023-01-11T00:00:00.000Z","title":"【JavaScript】事件循环机制","tags":["JavaScript"]},"headers":[{"level":2,"title":"进程和线程","slug":"进程和线程"},{"level":2,"title":"事件循环的特点","slug":"事件循环的特点"},{"level":2,"title":"整个事件循环过程","slug":"整个事件循环过程"},{"level":2,"title":"宏任务和微任务","slug":"宏任务和微任务"}],"relativePath":"docs/javascript/event-loop.md","lastUpdated":1674123919321.85}';var t={};const r=[l('<h2 id="进程和线程"><a class="header-anchor" href="#进程和线程" aria-hidden="true">#</a> 进程和线程</h2><p>浏览器是多进程的，每个 tab 就是一个进程，主进程会控制其他子进程的创建和销毁。</p><p>控制浏览器界面显示，比如用户交互、前进、后退等操作。</p><p>将渲染的内容绘制到用户界面上，一般是通过渲染进程完成，就是我们所说的浏览器内核。它会负责页面的渲染、脚本执行、事件处理等；每个 tab 都有一个渲染进程。</p><p>一个渲染进程一般会包括：</p><ul><li>GUI渲染线程：布局和绘制页面，与JS引擎互斥</li><li>JS引擎线程：负责解析执行JS脚本，GUI渲染线程互斥</li><li>事件触发线程：用来控制鼠标点击、定时器、ajax等事件，当事件满足触发条件时，把事件放入到js引擎的执行队列中</li><li>定时器触发线程：setInterval和setTimeout，计时完毕后会通知事件触发线程</li><li>异步http请求线程：请求完毕如果有回调函数会通知事件触发线程</li></ul><h2 id="事件循环的特点"><a class="header-anchor" href="#事件循环的特点" aria-hidden="true">#</a> 事件循环的特点</h2><p>JavaScript代码的执行过程中，除了依靠函数调用栈来搞定函数的执行顺序以外，还依靠任务队列来搞定另外一些代码的执行。多线程就是各种任务队列实现的基础，整个代码执行过程就是事件循环的过程。</p><h2 id="整个事件循环过程"><a class="header-anchor" href="#整个事件循环过程" aria-hidden="true">#</a> 整个事件循环过程</h2><p>整个代码分为同步任务和异步任务，同步任务都在JS引擎线程上执行，形成一个执行栈。事件触发线程管理一个任务队列，异步任务触发条件达成，将回调事件放到任务队列中。执行栈中所有同步任务执行完毕，此时JS引擎线程空闲，系统会读取任务队列，将可运行的异步任务回调事件添加到执行栈中，开始执行。执行完当前宏任务之后清空微任务队列。清空后会执行raf回调、事件处理、DOM操作布局和绘制。</p><h2 id="宏任务和微任务"><a class="header-anchor" href="#宏任务和微任务" aria-hidden="true">#</a> 宏任务和微任务</h2><p>一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。任务队列又分为 macro-task（宏任务）和 micro-task（微任务）。</p><p>macro-task（宏任务） 大概包括：</p><ul><li>渲染事件（DOM解析、布局、绘制）</li><li>用户交互（鼠标点击、页面缩放）</li><li>js脚本、定时器</li><li>网络请求、文件读写</li></ul><p>任务会添加到消息到消息队列的尾部，当主线程执行到该消息的时候就会执行；每次从事件队列中获取一个事件回调并且放到执行栈中的就是一个宏任务，每次宏任务执行完毕后会进行GUI渲染线程的渲染。然后再执行下一个宏任务。</p><p>micro-task（微任务） 大概包括：</p><ul><li>process.nextTick</li><li>Promise.then</li><li>async / await （等价于 Promise.then）</li><li>MutationObserver（HTML5 新特性）</li></ul><p>当宏任务执行完，就到达了检查点,会先将执行期间所产生的所有微任务都执行完再去进行渲染，创建全局执行上下文的时候，也会在V8引擎内部创建一个微任务队列。</p><p>微任务是为了解决实时响应的问题。</p>',19)];t.render=function(l,e,t,s,p,h){return a(),i("div",null,r)};export{e as __pageData,t as default};
