import{q as i,g as t,L as l}from"./common-874b6af4.js";const a='{"title":"【JavaScript】闭包","frontmatter":{"date":"2023-01-11T00:00:00.000Z","title":"【JavaScript】闭包","tags":["JavaScript"]},"relativePath":"docs/javascript/closure.md","lastUpdated":1674123919316.3418}';var p={};const r=[l("<ul><li><p>闭包其实是一种函数，它们有权限访问另外一个函数作用域中的变量。</p></li><li><p>有这种权限，主要是因为当前上下文环境中存在指向父级作用域的引用。</p></li><li><p>因为函数在定义的时候，作用域就确定了。</p></li><li><p>而代码执行时的编译阶段会创建可执行上下文，会进行词法环境和变量环境的创建以及this的指向确定。</p></li><li><p>而函数的可执行上下文中包含外部词法环境的引用，我们可以通过这个引用获取外部词法环境的变量、声明等。</p></li><li><p>相当于通过作用域链访问其作用域链上的变量。</p></li><li><p>闭包最大的作用就是隐藏变量，内部函数可以访问其所在的外部函数中声明的参数和变量，基于这个特性可以实现私有变量、变量存储等。</p></li></ul>",1)];p.render=function(l,a,p,e,s,_){return i(),t("div",null,r)};export{a as __pageData,p as default};
