import{q as n,g as s,l as a,L as p}from"./common-874b6af4.js";const t='{"title":"【JavaScript】ES6笔记之模块化","frontmatter":{"date":"2017-08-19T00:00:00.000Z","title":"【JavaScript】ES6笔记之模块化","tags":["ES6"]},"headers":[{"level":3,"title":"一、Babel编译器安装","slug":"一、babel编译器安装"},{"level":3,"title":"二、webpack实现模块化","slug":"二、webpack实现模块化"},{"level":3,"title":"三、rollup实现模块化","slug":"三、rollup实现模块化"},{"level":3,"title":"四、模块化标准见仁见智","slug":"四、模块化标准见仁见智"}],"relativePath":"docs/javascript/es6-module.md","lastUpdated":1674123919316.4175}';var e={};const o=p('<h3 id="一、babel编译器安装"><a class="header-anchor" href="#一、babel编译器安装" aria-hidden="true">#</a> 一、Babel编译器安装</h3><p>为了积极拥抱ES6的语法，首先来安装个babel。创建个文件夹，终端走你：</p><div class="language-sh"><pre><code>// 先初始化一个仓库\n<span class="token function">npm</span> init\n\n// 安装各种依赖\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev babel-core babel-preset-es2015 babel-preset-latest\n\n// 创建一个 .babelrc 文件\n<span class="token function">touch</span> .babelrc\n\n// 全局安装 babel 的命令行工具\n<span class="token function">npm</span> i <span class="token parameter variable">-g</span> babel-cli\n\n// 创建一个 ./src/index.js 测试文件\n<span class="token function">mkdir</span> src\n<span class="token builtin class-name">cd</span> src\n<span class="token function">touch</span> index.js\n</code></pre></div>',3),c=p('<p>在 .babelrc 中编写如下代码：</p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n  <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;es2015&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;latest&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在 index.js 文件中编写测试代码：</p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>终端走你：</p><div class="language-"><pre><code>babel index.js\n</code></pre></div><h3 id="二、webpack实现模块化"><a class="header-anchor" href="#二、webpack实现模块化" aria-hidden="true">#</a> 二、webpack实现模块化</h3><p>先安装一波依赖，</p><div class="language-"><pre><code>npm install webpack babel-loader —save-dev\n</code></pre></div><p>根目录下创建webpack.config.js文件，配置如下：</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">//模块打包的入口文件</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname<span class="token punctuation">,</span> <span class="token comment">//模块打包后输出文件位置</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./build/bundle.js&#39;</span> <span class="token comment">//模块打包后输出文件名</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//规则匹配</span>\n      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//打包的内容不包含modules中的js文件</span>\n      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>ES6的模块化语法主要包括：<strong>import</strong> 和 <strong>export</strong> 在src目录下，分别创建 util1.js、util2.js</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jeman&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn1&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn2&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在 index.js 文件中，引入这两个模块：</p><div class="language-js"><pre><code><span class="token keyword">import</span> util1 <span class="token keyword">from</span> <span class="token string">&#39;./util1.js&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./util2.js&#39;</span>\n\n<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>util1<span class="token punctuation">)</span>\n</code></pre></div><p>当模块中有 default ，可直接引入该模块，否则应大括号包含所有需要引入的函数。</p><h3 id="三、rollup实现模块化"><a class="header-anchor" href="#三、rollup实现模块化" aria-hidden="true">#</a> 三、rollup实现模块化</h3><div class="language-sh"><pre><code><span class="token function">npm</span> init //初始化\n<span class="token function">npm</span> i --save-dev rollup-plugin-node-resolve rollup-plugin-babel babel-plugin-external-helpers babel-preset-latest //安装相关依赖\n</code></pre></div><p>配置 .babelrc 文件，</p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n  <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&quot;latest&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">&quot;es20215&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">&quot;modules&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;external-helpers&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>配置 rollup.config.js 文件：</p><div class="language-js"><pre><code><span class="token keyword">import</span> babel <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-babel&#39;</span>\n<span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-node-resolve&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugin</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token string">&#39;node/modules/**&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">dist</span><span class="token operator">:</span> <span class="token string">&#39;build/bundle.js&#39;</span>\n<span class="token punctuation">}</span>   \n</code></pre></div><h3 id="四、模块化标准见仁见智"><a class="header-anchor" href="#四、模块化标准见仁见智" aria-hidden="true">#</a> 四、模块化标准见仁见智</h3><p>webpack 和 rollup 两者都能实现模块化，rollup功能单一，只负责模块的打包，编译出来的文件体积比较小，webpack功能强大，但是编译出来的代码冗余比例大。 从无模块化到AMD成为标准，到前端打包工具盛行，使得nodejs模块化可以被使用，node使用的是commonjs标准，直到ES6模块化出现，有一统前端模块化标准的趋势。目前nodejs是积极支持ES6模块化标准的，而浏览器尚未统一。让我们拭目以待。。。</p>',25);e.render=function(p,t,e,l,r,u){return n(),s("div",null,[o,a(" more "),c])};export{t as __pageData,e as default};
