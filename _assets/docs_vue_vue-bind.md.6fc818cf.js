import{q as e,g as l,L as i}from"./common-874b6af4.js";const t='{"title":"【Vue】vue 的双向绑定原理","frontmatter":{"date":"2019-03-22T00:00:00.000Z","title":"【Vue】vue 的双向绑定原理","tags":["Vue"]},"headers":[{"level":3,"title":"具体的步骤：","slug":"具体的步骤："},{"level":3,"title":"版本比较：","slug":"版本比较："}],"relativePath":"docs/vue/vue-bind.md","lastUpdated":1674123952860.904}';var r={};const p=[i('<p>vue.js是采用数据劫持结合发布者-订阅者模式的方式，通过ES5提供的Object.defineProperty()方法来劫持(监视)各个属性的setter,getter，在数据变动的时发布消息给订阅者，触发相应的监听回调。并且，由于是在不同的数据上触发同步，可以精确的将变更发送发送给绑定的视图，而不是对所有的数据都执行一次检测。</p><h3 id="具体的步骤："><a class="header-anchor" href="#具体的步骤：" aria-hidden="true">#</a> 具体的步骤：</h3><ol><li><p>需要observer的数据对象进行递归遍历，包括子属性对象的属性，都加上getter和setter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化;</p></li><li><p>compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图;</p></li><li><p>Watcher订阅者是Observer和compile之间通信桥梁，主要做的事情是：</p><ul><li>在自身实例化时往属性订阅器(dep)里面添加自己</li><li>自身必须有一个update()的方法</li><li>待属性变动dep.notice()通知的时候，能调用自身的update()方法，并触发compile中绑定的回调，则功成身退</li></ul></li><li><p>MVVM作为数据绑定的入口，整合observer、compile和watcher三者，通过observer来监听自己的model数据变化，通过compile来编译模板指令，最终利用watcher搭起的observer和compile之间的通信桥梁，达到数据变化---试图更新;视图交互变化(input)--&gt;数据model变更的双向绑定效果</p></li></ol><h3 id="版本比较："><a class="header-anchor" href="#版本比较：" aria-hidden="true">#</a> 版本比较：</h3><ol><li><p>基于数据劫持/依赖收集的双向绑定的优点</p><ul><li>不需要显示的调用，Vue利用数据劫持+发布订阅，可以直接通知变化并且驱动视图</li><li>直接得到精确的变化数据，劫持了属性setter，当属性值改变，我们可以精确的获取变化的内容newValue，不需要额外的diff操作</li></ul></li><li><p>Object.defineProperty的缺点</p><ul><li>不能监听数组：因为数组没有getter和setter，因为数组长度不确定，如果太长性能负担太大</li><li>只能监听属性，而不是整个对象，需要遍历循环属性</li><li>只能监听属性变化，不能监听属性的删减</li></ul></li><li><p>proxy的好处</p><ul><li>可以监听数组</li><li>监听整个对象不是属性</li><li>13种来截方法，强大很多</li><li>返回新对象而不是直接修改原对象，更符合immutable；</li></ul></li><li><p>proxy的缺点</p><ul><li>兼容性不好，而且无法用polyfill磨平。</li></ul></li></ol>',5)];r.render=function(i,t,r,a,o,u){return e(),l("div",null,p)};export{t as __pageData,r as default};
